#+title Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el
* Package Setup 
#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                        ("org" . "https://orgmode.org/elpa/")
                        ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
(package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
    (package-install 'use-package))

(require 'use-package)

(setq use-package-always-ensure t)

;;Logging Package
(use-package command-log-mode)
#+end_src
The first time this config is loaded M-x all-the-icons-install fonts needs to be ran manually
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
Hydra allows for a command to be repeated on hold
#+begin_src emacs-lisp
(use-package hydra)
#+end_src
Elfeed feed reader
#+begin_src emacs-lisp
(use-package elfeed)
#+end_src
* Bindings
** Better Escape
Make the escape key get out of prompts
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Counsel
#+begin_src emacs-lisp
(use-package counsel
:bind (("M-x" . counsel-M-x)
        ("C-x b" . counsel-ibuffer)
        ("C-x C-f" . counsel-find-file)
        :map minibuffer-local-map
        ("C-r" . 'counsel-minibuffer-history)))
#+end_src
** Which-Key
#+begin_src emacs-lisp
(use-package which-key
:init (which-key-mode)
:diminish which-key-mode
:config
(setq which-key-idle-delay 0.2)
) 
#+end_src
General Sets the actual binds
#+begin_src emacs-lisp
(use-package general
:config
(general-create-definer rune/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")
)
#+end_src

#+begin_src emacs-lisp
    (rune/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")

    "c"  '(:ignore c :which-key "comments")
    "cc" '(comment-or-uncomment-region-or-line :which-key "toggle comment")

    "w"  '(:ignore w :which-key "windows")
    "wv" '(evil-window-vsplit :which-key "split vertical")
    "ws" '(evil-window-split :which-key "split horizontal")
    "wh" '(evil-window-left :which-key "move left")
    "wl" '(evil-window-right :which-key "move right")
    "wj" '(evil-window-down :which-key "move down")
    "wk" '(evil-window-up :which-key "move up")
    "wc" '(evil-window-delete :which-key "close window")

    "g" '(:ignore g :which-key "magit")
    "gg" '(magit-status :which-key "magit status")
    "gy" '(yadm-status :which-key "yadm status")

    "e" '(:ignore e :which-key "elfeed")
    "ee" '(elfeed :which-key  "open elfeed")
    "eu" '(elfeed-update :which-key  "update elfeed")

    "." '(dired :which-key "dired")
    )
#+end_src
** Evil Mode
#+begin_src emacs-lisp
(use-package evil
:init
(setq evil-want-integration t)
(setq evil-want-keybinding nil)
(setq evil-want-C-u-scroll t)
(setq evil-want-C-i-jump nil)
:config
(evil-mode 1)
(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
(define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
;; Use visual line motions even outside of visual-line-mode buffers
(evil-global-set-key 'motion "j" 'evil-next-visual-line)
(evil-global-set-key 'motion "k" 'evil-previous-visual-line)

(evil-set-initial-state 'messages-buffer-mode 'normal)
(evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
:after evil
:config
(evil-collection-init))
#+end_src
Make alt-v work as paste
#+begin_src emacs-lisp
(evil-global-set-key 'normal (kbd "M-v") 'clipboard-yank)
#+end_src
** Hydra
Leader Keys
#+begin_src emacs-lisp
(rune/leader-keys
"ts" '(hydra-text-scale/body :which-key "scale text")
"tr" '(hydra-resize/body :which-key "resize windows"))
#+end_src
*** Text Scaling
#+begin_src emacs-lisp
(defhydra hydra-text-scale (:timeout 4)
"scale text"
("j" text-scale-increase "in")
("k" text-scale-decrease "out")
("f" nil "finished" :exit t))
#+end_src
*** Window Resizing
#+begin_src emacs-lisp
(defhydra hydra-resize (:timeout 4)
"scale text"
("+" evil-window-increase-height "increase height")
("-" evil-window-decrease-height "decrease height")
("<" evil-window-decrease-width "decrease width")
(">" evil-window-increase-width "increase width")
("=" balance-windows "equalize")
("f" nil "finished" :exit t))

#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)) 
  (require 'tramp)
  (add-to-list 'tramp-methods
         '("yadm"
         (tramp-login-program "yadm")
         (tramp-login-args (("enter")))
         (tramp-login-env (("SHELL") ("/bin/sh")))
         (tramp-remote-shell "/bin/sh")
         (tramp-remote-shell-args ("-c"))))
#+end_src
** Yadm
#+begin_src emacs-lisp
(defun yadm--files ()
    (let ((default-directory "~/"))
      (cl-delete-if-not
       #'file-exists-p
       (process-lines "yadm" "ls-tree" "--full-tree" "-r" "--name-only" "HEAD"))))

  (defun yadm-find-file ()
    (interactive)
    (let ((default-directory  "~/"))
      (find-file
       (completing-read "Yadm file: " (yadm--files)))))

  (defun yadm-dired ()
    (interactive)
    (let ((default-directory "~/"))
      (with-current-buffer (dired `("*yadm*" ,@(yadm--files)))
        (setq-local revert-buffer-function
                    (lambda (&rest args)
                      (setq dired-directory
                            (cons (car dired-directory)
                                  (yadm--files)))
                      (apply #'dired-revert args))))))

  (define-minor-mode yadm-minor-mode
    "A minor mode for magit yadm buffers."
    :keymap (let ((map (make-sparse-keymap)))
              (define-key map (kbd "C-x d") 'yadm-dired)
              (define-key map (kbd "C-x C-f") 'yadm-find-file)
              (define-key map "s" 'yadm-stage)
              map))

  (defun yadm-status ()
    (interactive)
    ; (require 'tramp)
    (with-current-buffer (magit-status "/yadm::")
      (yadm-minor-mode 1)))

  ; (with-eval-after-load 'tramp
   ; (add-to-list 'tramp-methods
                  ; '("yadm"
                    ; (tramp-login-program "yadm")
                    ; (tramp-login-args (("enter")))
                    ; (tramp-remote-shell "/bin/bash")
                    ; (tramp-remote-shell-args ("-c"))))
    (defun yadm-stage ()
      (interactive)
      (let ((file
             (let ((default-directory "~/"))
               (read-file-name "Stage file: "))))
        (if (equal (expand-file-name file)
                   (expand-file-name "~/.yadm/"))
            (user-error "Can't stage yadm dir itself.")
          (magit-with-toplevel
            (magit-stage-1 nil (list file))
            )))
      )
#+end_src
* File management
Stop making annoying lock files
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src
* UI Config
** Get rid of annoying startup message
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src
** Use Doom Theme 
#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-dracula t))
#+end_src
** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src
** Rainbow Delims
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** disable pointless bars 
#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)
(menu-bar-mode -1)
#+end_src 
** Disable Transparency
#+begin_src emacs-lisp
; disable transparency 
(set-frame-parameter (selected-frame) 'alpha '(100 . 100))
(add-to-list 'default-frame-alist '(alpha . (100 . 100)))
#+end_src
** Line Numbers
#+begin_src emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode t)
(setq display-line-numbers-mode 'relative)
(setq display-line-numbers-type 'relative)
#+end_src
*** Line Number Overrides
We don't want line numbers in org mode or in terminals
#+begin_src emacs-lisp
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
	      (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Fonts
*** General Fonts
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Fira Code Retina" :height 200)
;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 160)
;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height 160 :weight 'regular)
#+end_src
*** Org Mode Fonts
#+begin_src emacs-lisp
(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

* Help
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))


#+end_src
* Org Mode
** Basic Setup
#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    ;; (auto-fill-mode 0)
    (visual-line-mode 1)
    ;; (setq evil-auto-indent nil)
    )
#+end_src
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    ; When a task is set to completed, show the time it was completed
    (setq org-log-done 'time)
    ; Show org log as a collapsible drawer
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/.config/mikemacs/OrgFiles/Tasks.org"
          "~/.config/mikemacs/OrgFiles/birthdays.org")
          )
    (efs/org-font-setup)

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/.config/mikemacs/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/.config/mikemacs/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/.config/mikemacs/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)
        )
      )


    )

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


  ; Centers text in org mode
  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))


  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (setq org-confirm-babel-evaluate nil)

#+end_src
** Templates
#+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

** Tangle
Tangle the emacs config into init.el
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.config/mikemacs/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

* Elfeed
** Feeds
#+begin_src emacs-lisp
(custom-set-variables
 '(elfeed-feeds
   (quote
    (

     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCY3A_5R_m3PXCn5XDhvBBsg") ; Adam Millard
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UC2cC48A261pBVKztLyzOAnA") ; Ask Sebby
     ("http://www.awkwardzombie.com/awkward.php"                                    ) ; Awkward Zombie
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCOFH59uoSs8SUF0L_p3W0sg") ; BadSeed
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCr3cBLTYmIK9kY0F_OdFWFQ") ; Casually explained
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UC2C_jShtL725hvbm1arSV9w") ; CGP Grey
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCg6gPGh8HU2U01vaFCAsvmQ") ; Chris Titus Tech
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCJQfl8QxjNen736AVO3ecFg") ; Clemps
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCFQMnBA3CS502aghlcr0_aw") ; CoffeeZilla
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UC4QZ_LsYcvcq7qOsOhpAX4A") ; Cold Fusion
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCq6VFHwMzcMXbuKyG7SQYIg") ; Cr1tikal
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCQMyhrt92_8XM0KgZH6VnRg") ; Company Man
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UC9WQRw8jgJhag-vkDNTDMRg") ; Coffee Break
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UC7SeFWZYFmsm1tqWxfuOTPQ") ; Dankula
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCVls1GmFKf6WlTraIb_IaJg") ; Distrotube
     ("http://feeds.feedburner.com/Explosm"                                         ) ; Explosm
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCRXnOs1rjfLMYrtZ-0n29NA") ; Freedom Toons
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCLmzk98n_v2doN2Y20S-Zog") ; Gaming Brit Show
     ;; ("https://www.gematsu.com/feed")                                                 ; Gematsu
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UC7dF9qfBMXrSlaaFFDvV_Yg") ; Gigguk
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCuCkxoKLYO_EQ2GeFtbM_bw") ; Half As Interesting
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCR1D15p_vdP3HkrH8wgjQRw") ; Internet Historian
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCGSGPehp0RWfca-kENgBJ9Q") ; Jreg
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCXuqSBlHAE6Xw-yeJA0Tunw") ; LinusTechTips
     ("https://videos.lukesmith.xyz/feeds/videos.xml?accountId=3") ;                    Luke Smith
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCb_sF2m3-2azOqeNEdMwQPw") ; Matthewmatosis
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCXX1iQGufHujuIvQ38MPKMA") ; MauLer
     ("https://feeds.feedburner.com/nerfnow/full")                                    ; Nerf Now
     ("http://feeds.penny-arcade.com/pa-mainsite")                                    ; Penny Arcade
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UC2PA-AKmVpU6NKCGtZq_rKQ") ; PhilosophyTube
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCgNg3vwj3xt7QOrcIDaHdFg") ; Polymatter
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCXtrYuGksGkkyls50lPWvYQ") ; PPCIan
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UC1JTQBa5QxZCpXrFSkMxmPw") ; Raycevik
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UC1DTYW241WD64ah5BFWn4JA") ; SamONella
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UC0aanx5rpr7D1M7KCFYzrLQ") ; Shoe
     ("https://www.smbc-comics.com/comic/rss")                                        ;  SMBC
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCWqr2tH3dPshNhPjV5h1xRw") ; Super Bunny Hop
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCtZO3K2p8mqFwiKWb9k7fXA") ; TechAltar
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UC0vBXGSyV14uvJ4hECDOl0Q") ; TechQuickie
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCCOD-tcFzMSiaNkSUB_KVjQ") ; Tonald
     ("http://feeds.feedburner.com/oatmealfeed")                                      ; The Oatmeal
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCHnyfMqiRRG1u-2MsSQLbXA") ; Veritasium
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UC9RM-iSvTu1uPJb8X5yp3EQ") ; Wendover Productions
     ("https://www.youtube.com/feeds/videos.xml?channel_id=UCVWhVAZwCdQsPZL-mDLcxPQ") ; Whitelight
     ))))
#+end_src
* Development
** Commenting
#+begin_src emacs-lisp
(defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)
        ))
#+end_src
** Ivy
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src
** Languages
*** Language Server
#+begin_src emacs-lisp
(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))
(use-package lsp-mode
:commands (lsp lsp-deferred)
:hook (lsp-mode . efs/lsp-mode-setup)
:init
(setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
:config
(lsp-enable-which-key-integration t))
  #+end_src
#+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))
#+end_src
Integrates lsp with ivy
#+begin_src emacs-lisp
(use-package lsp-ivy)
#+end_src
*** Company mode
*** Python
#+begin_src emacs-lisp
  ;; (use-package python-mode
  ;;   :ensure nil
  ;;   :hook (python-mode . lsp-deferred)
  ;;   :custom
  ;;   ;; NOTE: Set these if Python 3 is called "python3" on your system!
  ;;   (python-shell-interpreter "python3")
  ;;   ;; (dap-py
    ;; thon-executable "python3")
    ;; (dap-python-debugger 'debugpy)
    ;; :config
    ;; (require 'dap-python)
    ;; )
#+end_src
#+begin_src emacs-lisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred))))  ; or lsp-deferred
#+end_src
